			微服务分布式配置中心Config
----------------------------------------------------
配置中心就是将所有的配置统一管理，实现高效管理并高效
切换。配置中心分为客户端和服务端。

第一步：服务端
****************************************************
	1.创建一个工程 config-service
	2.添加的以下依赖
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-config-server</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
	3.作下面的配置
		#服务端口
		server:
		  port: 9100

		#服务名称
		spring:
		  application:
			name: config-service
		  cloud:
			config:
			  server:
				#指定配置中心的地址和用户密码
				git:
				  uri: https://github.com/shuzhongguo/config-server.git
				  username: git用户名
				  password: git密码
				  #当配置文件更新时强制更新
				  force-pull: true
				  #连接超时
				  timeout: 5
				  #默认分支
				  default-label: master
	4.访问方式（一定要注意语法，如果有问题，会出错）
		多种访问路径，可以通过启动日志去查看
		例子 http://localhost:9100/product-service.yml

		/{name}-{profiles}.properties
		/{name}-{profiles}.yml
		/{name}-{profiles}.json
		/{label}/{name}-{profiles}.yml

		name 服务器名称
		profile 环境名称，开发、测试、生产
		lable 仓库分支、默认master分支
				  
第二步：客户端
****************************************************
	1.在工程中添加下面的依赖
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		
	2.在配置文件修改只留下用户或密码等重要的信息留在配置中心:
		注意必须把application.yml修改为boostrap.yml
		#指定注册中心地址
		eureka:
		  client:
			serviceUrl:
			  defaultZone: http://localhost:8761/eureka/

		
		spring:
		  application:
			#服务的名称
			name: product-service
		  cloud:
			config:
			  discovery:
				#配置服务中心的id
				service-id: config-service
				#启动发现，否则读取不到配置，默认是false
				enabled: true
				#分支
				label: test
