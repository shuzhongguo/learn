			akka自定义邮箱
-------------------------------------
邮箱非常像队列一样，每一个actor都自己
的邮箱，放在里面的信息是一个一个的处
理的它们，实现自定义邮箱通过akka实现例
如邮箱的优先级和邮箱感知控制，其他默认
邮箱。
这一小节记录一下自定义处理信息的控制

1.必要条件
************************************
	导入java并发工具包中java.util.concurrent.
	ConcurrentLinkeQueue
	导入akka.dispatch.{MailboxType,
	ProduceMessageQueue,Envelope,MessageQueue}
	还有导入akka的配置类com.typesafe.config.
	Config

2.实现自己的消息队列需要继承MessageQueue并实现其中的抽象方法
	/**
	 * A MessageQueue is one of the core components in forming an Akka Mailbox.
	 * The MessageQueue is where the normal messages that are sent to Actors will be enqueued (and subsequently dequeued)
	 * It needs to at least support N producers and 1 consumer thread-safely.
	 */
	trait MessageQueue {
	  /**
	   * Try to enqueue the message to this queue, or throw an exception.
	   */
	  def enqueue(receiver: ActorRef, handle: Envelope): Unit // NOTE: receiver is used only in two places, but cannot be removed

	  /**
	   * Try to dequeue the next message from this queue, return null failing that.
	   */
	  def dequeue(): Envelope

	  /**
	   * Should return the current number of messages held in this queue; may
	   * always return 0 if no other value is available efficiently. Do not use
	   * this for testing for presence of messages, use `hasMessages` instead.
	   */
	  def numberOfMessages: Int

	  /**
	   * Indicates whether this queue is non-empty.
	   */
	  def hasMessages: Boolean

	  /**
	   * Called when the mailbox this queue belongs to is disposed of. Normally it
	   * is expected to transfer all remaining messages into the dead letter queue
	   * which is passed in. The owner of this MessageQueue is passed in if
	   * available (e.g. for creating DeadLetters()), “/deadletters” otherwise.
	   */
	  def cleanUp(owner: ActorRef, deadLetters: MessageQueue): Unit
	}

3.继承实现MailboxType和ProducesMessageQueue下面是他们的源码
	/**
	 * MailboxType is a factory to create MessageQueues for an optionally
	 * provided ActorContext.
	 *
	 * <b>Possibly Important Notice</b>
	 *
	 * When implementing a custom mailbox type, be aware that there is special
	 * semantics attached to `system.actorOf()` in that sending to the returned
	 * ActorRef may—for a short period of time—enqueue the messages first in a
	 * dummy queue. Top-level actors are created in two steps, and only after the
	 * guardian actor has performed that second step will all previously sent
	 * messages be transferred from the dummy queue into the real mailbox.
	 */
	trait MailboxType {
	  def create(owner: Option[ActorRef], system: Option[ActorSystem]): MessageQueue
	}

	trait ProducesMessageQueue[T <: MessageQueue]
	从上面的代码中可知我们要实现def create抽象方法
	
4.在application.conf添加配置
	
	

